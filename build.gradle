plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	testImplementation 'org.springframework.batch:spring-batch-test'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco{
	toolVersion = "0.8.10"
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
		csv.required = true
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
		fileTree(dir:it,
			excludes: [
			        '**/dto**',
					'**/entity**',
					'**/exception**',
					'**/config**',
					'**/enums**',
					'**/error-code**',
					'**/utils**',
					'**/aspect**',
					'**/consumer**',
					'**/batch**',
					'**/client**',
					'**/common**'
			]
		)
	})
	}
}
